1.1 
    Linear Data Structures
    - Array
    - Stack
    - Queue
    Non-Linear Data Structures
    - BST
    - Heap
    - Graphs

1.2
    Array:
    Description: An array is a collection of items stored at contiguous memory locations.
    Category: Linear
    Difficulty adding, removing, and sorting: It will need to be resized and the memory reassigned. O(n)
    Difficulty searching: Due to the fixed locations accessing/searching is fast. O(n)
    When to use: Best place to use is for set list.
    When not to use: When large amounts of data will need to be updated constantly

    Stack:
    Description: An stack is a collection of items stored at contiguous memory locations but only the last item can be accessed FILO.
    Category: Linear
    Difficulty adding, removing: Due to a stack's FILO only the last added entry can be altered or added onto. O(1) or O(n)
    Difficulty sorting: A stack can only be sorted with a secondary stack O(n^2)
    Difficulty searching: A stack cant be searched only the last item can be peeked at. o(n)
    When to use: Best place to use is for set items that can be used for back tracking like the back button on a browser.
    When not to use: Any place where more that the last item will need to be altered/checked/searched

    Queue:
    Description: An queue is a list of items stored at contiguous memory locations but work on the FIFO principal.
    Category: Linear
    Difficulty adding, removing: A queue can only have items removed from the Front of the list and added from the back of the list O(n)
    Difficulty sorting: The queue will need a stack to sort(n^2)
    Difficulty searching: A queue can not be searched only the front element can be peeked at.
    When to use: When you want keep thins in the order they are inserted.
    When not to use: When you need to access/add/remove anything from the list of data

    Tree:
    Description:    a Tree is a hierarchical data structure with parents and children coming from a root
    Category:   Non-Linear
    Difficulty adding, removing: Adding or removing leaves(Outer layers with no children) are easy removing any node with a child
                                will remove the child node as well.
    Difficulty sorting: A tree can not be sorted a new tree will need to be built to sort data.
    Difficulty searching: 
    When to use: A tree can be used for file systems on a PC
    When not to use: If the list is a fixed length and needs to be access frequently

    Heap:
    Description: A heap is a binary hierarchical tree that can only add a child if the same row has been filled. Max-heap and min-heap
    Category: Non-Linear
    Difficulty adding, removing: Adding can only be done on the bottom layer from left to right. 
                                Removing will remove the max/ min number the root.
    Difficulty sorting: Sorting can be done using an array and formulas to calculate the correct parent, left child and right child
    Difficulty searching: The heap can be searched in the form of an array
    When to use: Heaps are used when determining priority (min or max value)
    When not to use: If the list is composed of anything other than integers 

    Graph:
    Description:
    Category: Non-Linear
    Difficulty adding, removing:
    Difficulty sorting:
    Difficulty searching:
    When to use:
    When not to use:

